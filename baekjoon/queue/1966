첫 줄 테스트 케이스 t
두번 째줄 입력받는 문서의 개수 a , 왼쪽에서 몇번 째에 있느냐 b
세번째 줄 중요도 c 확인
중요도 순서대로 문서가 몇 번째로 인쇄되는 지 출력

## 1. 현재 프린터기의 가장 앞에 있는 문서의 중요도를 확인한다.
## 2. 나머지 문서들 중 현재 문서보다 중요도가 높은 문서가 하나라도 있다면, 이 문서를 인쇄하지 않고 
      프린터기의 가장 뒤에 재배치 한다. 그렇지 않다면 바로 인쇄를 한다.
(맨 왼쪽은 0부터 , 중요도는 1 이상 9 이하의 정수이며 같은 중요도를 가질 수 있음)

#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;  // 우선순위 큐 안쓰고 풀어보자

int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    
    int t;
    cin >> t;
    queue<int>q;  // 각 문서의 중요도를 순서대로 받는 배열
    
    for(int i=0;i<t;i++) {
        int n, m;       // n=문서의 개수, m=찾고자하는 배열의 포인터값
        cin >> n >> m;
        vector<int> v; // 여기도 q와 같은 값을 넣어서 v[m]의 값과 비교
        vector<int>a; // 우선순위대로 구현한 배열
        
        for(int j=0;j<n;j++) {
            int important;
            cin >> important;
            q.push(important);
            v.push_back(important);
            a.push_back(important);
        }
        
        sort(a.begin(),a.end(),greater<>());
        
        // for(int j=0;j<n;j++) {
        //     cout << q.front() << ' ' << v[j] << ' ' << v[m] << ' ' << a[j] << endl;
        //     q.pop();
        // }
        // cout << "___________" << endl;
        
        int re = 0;
        
        for(int j=0;j<n;j++) {
            if(a[j] == v[m]) {
                re = j+1;
                break;
            }
        }
        
        cout << re << '\n';
        
        
    }


}





#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    
    int t;
    cin >> t;
    
    while(t--) {
        int n, m;
        cin >> n >> m;
        vector<int> v; // 기본 배열순서 받는 배열
        vector<int> a; // 오름차순 배열
        
        for(int i=0;i<n;i++) {
            int im;
            cin >> im;
            v.push_back(im);
        }
        
        
        
        
        
        
    }
    
    
    
    
    
    
    
    
    
    
}























