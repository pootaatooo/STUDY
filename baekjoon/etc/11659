// 구간합 문제
#include <iostream>

using namespace std;

int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n, m;
    cin >> n >> m;
    int num[n+1]; // n개의 수(1부터 실제적인 값을 넣어줄 거기 때문에 +1)
    // vector<pair<int,int>>v; // 합을 구하는 구간 v.first = i , v.second = j 
    
    num[0] = 0;  // 그냥 초기화
    
    for(int i=1;i<=n;i++) {
        cin >> num[i];
    }
    
    
    for(int i=0;i<m;i++) {
        int a, b;
        cin >> a >> b;
        int re = 0;  // for문이 돌때마다 초기화
        
        for(int j=a;j<=b;j++) {
            re += num[j];
        }
        cout << re << '\n';
    }
    
}
#시간 초과가 남. 조금 더 효율적인 알고리즘을 생각해봐야함

#include <iostream>

using namespace std;

int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n, m;
    cin >> n >> m;
    int num[100001] = {0,};
    int re[100001] = {0,};
    
    for(int i=1;i<=n;i++) {
        cin >> num[i];
        re[i] = re[i-1]+num[i]; // 식 이해
        // for(int j=1;j<=n;j++) { 이걸로 처음에 했는데 시간초과 결국은 이중 for문으로인한 O(Nn^2)가 문제
        //     re[i] += num[j];
        // }
    }
    
    for(int i=1;i<=m;i++) {
        int a, b;
        cin >> a >> b;
        cout << re[b]-re[a-1] << '\n'; // a[0]에는 0이 들어있음!
    }
    
}
