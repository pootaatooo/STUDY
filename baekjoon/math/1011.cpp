#include <iostream>

using namespace std;

int main() {
    int t;
    cin >> t;
    
    while(t--) {
        int x;
        int y;
        cin >> x >> y;
        int dis = y-x;
        int z = 1;
        long long sum = 0;
        
        while(dis > sum+z*2) { // 양쪽에서z만큼 가까워진거리보다 크면
            sum += z*2; // 양쪽에서 움직인 거리를 더해줌
            z++; // 다음 움직일 수 있는 최대거리를 만들어줌
        }
        
        if(sum+z>= dis) {
            cout << 2*z-1 << '\n';
        }
        else
            cout << 2*z << '\n';
    }

}

# 규칙
y-x한 거리를 dis, 이동거리값을 k, 이동 횟수를 n이라고 한다.
dis = 1 -> k = 1 n = 1;
dis = 2 -> k = 1,1 n = 2;
-----------------------------------------
dis = 3 -> k = 1,1,1 n = 3;
dis = 4 -> k = 1,2,1 n = 3;
dis = 5 -> k = 1,2,1,1 n = 4;
dis = 6 -> k = 1,2,2,1 n = 4;
-----------------------------------------
dis = 7 -> k = 1,2,2,1,1 n = 5;
dis = 8 -> k = 1,2,2,2,1 n = 5;
dis = 9 -> k = 1,2,3,2,1 n = 5;
dis = 10 -> k = 1,2,3,2,1,1 n = 6;
dis = 11 -> k = 1,2,3,2,2,1 n = 6;
dis = 12 -> k = 1,2,3,3,2,1 n = 6;
-----------------------------------------
dis = 13 -> k = 1,2,3,3,2,1,1 n = 7;
dis = 14 -> k = 1,2,3,3,2,2,1 n = 7;
dis = 15 -> k = 1,2,3,3,3,2,1 n = 7;
dis = 16 -> k = 1,2,3,4,3,2,1 n = 7;
dis = 17 -> k = 1,2,3,4,3,2,1,1 n = 8;
dis = 18 -> k = 1,2,3,4,3,2,2,1 n = 8;
dis = 19 -> k = 1,2,3,4,3,3,2,1 n = 8;
dis = 20 -> k = 1,2,3,4,4,3,2,1 n = 8;
-----------------------------------------
dis = 21 -> k = 1,2,3,4,5,4,3,2,1 n = 9; 식의 규칙을 도출해낼 수 있다.

// 밑의 수의 개수를 기준으로
0 < 1,2 <= 2*1
2*1 < 3,4,5,6 <= 2*1 + 2*2
2*1+2*2 < 7,8,9,10,11,12 <= 2*1 + 2*2 + 2*3 으로 표현 가능하며

2*1+2*2 < 7,8,9,10,11,12 <= 2*1 + 2*2 + 2*3를 기준으로 했을때
6 < 7,8,9,10,11,12 <= 12이기 때문에 절반을 기준으로 작은값 3개는 2*k-1 큰값 3개는 2*k라는 값이 도출된다.


# 규칙설명
https://lee1201zxc.tistory.com/entry/%EB%B0%B1%EC%A4%80-1011-Fly-me-to-the-Alpha-CentauriC%EC%96%B8%EC%96%B4
