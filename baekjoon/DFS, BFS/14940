#include <iostream>
#include <queue>

using namespace std;

int n, m;
int dx[4] = {0,-1,0,1};
int dy[4] = {-1,0,1,0};
int map[1001][1001];
bool visited[1001][1001];

typedef pair<int,int> pii;

int bfs(int x, int y) { // x,y는 목표지점의 좌표
    queue<pii> q;
    q.push({x,y});
    visited[x][y] = true;
    int dist = 0;
    
        while(!q.empty()) {
            int sz = q.size();
            while(sz--) {
                pii cur = q.front();
                q.pop();
                
                if(map[cur.first][cur.second] == 2) {
                    return dist;
                }
                
                for(int i=0;i<4;i++) {
                    int nx = cur.first + dx[i];
                    int ny = cur.second + dy[i];
                
                    if(nx>=0 && ny>=0 && nx<n && ny<m && !visited[nx][ny] && map[nx][ny] == 1) {
                        visited[nx][ny] = true;
                        q.push({nx,ny});
                    }
                }
            }
            dist++;
        }
        
        return -1;
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    
    cin >> n >> m;
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            cin >> map[i][j];
        }
    }
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            if(map[i][j] == 0 || map[i][j] == 2) {
                cout << 0 << ' ';
            }
            else 
                cout << bfs(i,j) << ' ';
        }
        cout << '\n';
    }

    return 0;
}
