#include <iostream>
#include <queue>

using namespace std;

int m, n;
int dx[4] = {0,-1,0,1};
int dy[4] = {1,0,-1,0};
int cnt = 0;

void bfs(int x, int y, int toma[][1001], bool check[][1001]) {
    cnt++;
    queue<pair<int,int>> q;
    q.push(make_pair(x,y));
    check[x][y] = true;
    
    while(!q.empty()) {
        pair<int,int> cur = q.front();
        q.pop();
        
        for(int i=0;i<4;i++) {
            int nx = cur.first + dx[i];
            int ny = cur.second + dy[i];
            
            // if(toma[nx][ny] == -1) continue;
            
            if(nx>=0 && ny>=0 && nx<n && ny<m && !check[nx][ny] && toma[nx][ny] == 0) {
                toma[nx][ny] = 1;
                check[nx][ny] = true;
                q.push({nx,ny});
            }
        }
    }
    
}

int main() {
    
    cin >> m >> n;
    
    int toma[1001][1001];
    bool check[1001][1001] = {false,};
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            cin >> toma[i][j];
        }
    }
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            if(toma[i][j] == -1)
                check[i][j] = true;
            if(toma[i][j] == 1 && !check[i][j]) {
                bfs(i, j, toma, check);
            }
        }
    }
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            if(check[i][j] == 0) {
                cout << -1;
                return 0;
            }
        }
    }
    cout << cnt;
    
}

# https://www.acmicpc.net/board/view/137117
