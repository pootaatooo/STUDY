#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};
char a[25][25];  // 지도
int z[25][25]; // 방문여부
vector<int> v;



void dfs(int x, int y, int n) {
    queue<pair<char,char>> q;
    q.push(make_pair(x,y));
    z[x][y] = 1;
    int count=0;
    while(!q.empty()) {
        pair<int,int> cur = q.front();
        q.pop();
        count++;
        for(int i=0;i<4;i++) {
            int nx = cur.first + dx[i];
            int ny = cur.second + dy[i];
            
            if(nx<0 || nx>=n || ny<0 || ny>=n) continue;
            if(a[nx][ny] != '1' || z[nx][ny]!=0) continue;
            
            z[nx][ny]=z[cur.first][cur.second]+1;
            q.push({nx,ny});
            
        }
        
    }
    v.push_back(count);
    
}


int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    
    int n;
    cin >> n;

    for(int i=0;i<n;i++) {
        for(int j=0;j<n;j++) {
            cin >> a[i][j];
            z[i][j] = 0;
        }
    }
    
    queue<pair<char,char>> q;
    int cnt = 0;
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<n;j++) {
            if(a[i][j] == '1'&& z[i][j] == 0) {
                dfs(i,j,n);
                cnt++;
            }
        }
    }
    
    sort(v.begin(),v.end());
    
    cout << cnt << endl;
    
    for(int i=0;i<cnt;i++) {
        cout << v[i] << endl;
    }
    
}

bfs로 풀었는데 너무 어렵다.. 큰틀은 같은데 여러번 풀어봐야 제대로 알 수 있을듯
